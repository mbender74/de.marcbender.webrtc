/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.marcbender.webrtc;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.KrollDict;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import de.marcbender.webrtc.ViewProxy;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.appcelerator.titanium.util.TiConvert;


@Kroll.module(name="DeMarcbenderWebrtc", id="de.marcbender.webrtc")
public class DeMarcbenderWebrtcModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "DeMarcbenderWebrtcModule";
	private static final boolean DBG = TiConfig.LOGD;
	private static DeMarcbenderWebrtcModule webRTCModule;
	private int remoteAudioVolume;
	private String connectionID;
	private String fromConnectionID;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public DeMarcbenderWebrtcModule()
	{
		super();
		webRTCModule = this;
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	public static DeMarcbenderWebrtcModule getModule()
	{
		Log.d(LCAT, "getModule");
		return webRTCModule;
	}

	@Kroll.method
	public void startWebRTC(KrollDict options)
	{
	  connectionID = options.getString("userID");
	  fromConnectionID = options.getString("fromUserID");

	  ViewProxy.getInstance().startWebRTC(options.getString("userID"),options.getString("fromUserID"),TiConvert.toBoolean(options.get("callInitiator"),false));
	  this.fireEvent("open",null);
	}
	@Kroll.method
	public void stopWebRTC(KrollDict options)
	{
	  ViewProxy.getInstance().getCallActivity().onChannelClose();
	  //this.fireEvent("closed",null);
	}



	@Kroll.method
	public void switchCamera()
	{
	  ViewProxy.getInstance().getCallActivity().getPeerConnectionClient().switchCamera();
	}

	@Kroll.method
	public void switchAudio(KrollDict options)
	{
	  ViewProxy.getInstance().getCallActivity().getPeerConnectionClient().setRemoteAudioEnabled(TiConvert.toBoolean(options.get("state"),false));
	}

	@Kroll.method
	public void switchVideo(KrollDict options)
	{
	  ViewProxy.getInstance().getCallActivity().getPeerConnectionClient().setVideoLocalEnabled(TiConvert.toBoolean(options.get("state"),false));
	}


	@Kroll.method
	public void switchMicrophone(KrollDict options)
	{
	  ViewProxy.getInstance().getCallActivity().getPeerConnectionClient().setAudioEnabled(TiConvert.toBoolean(options.get("state"),false));
	}

    @Kroll.method
    public void createOffer(KrollDict options)
	{
	  ViewProxy.getInstance().createOffer(options.getString("userID"));
    }



    @Kroll.method
    public void setRemoteOffer(KrollDict options)
	throws JSONException {

	  ViewProxy.getInstance().setRemoteOffer(options.getString("userID"), options.getString("data"));
    }

    @Kroll.method
    public void setRemoteAnswer(KrollDict options)
	throws JSONException {
	  ViewProxy.getInstance().setRemoteAnswer(options.getString("userID"), options.getString("data"));
    }

    @Kroll.method
    public void setICECandidate(KrollDict options)
	throws JSONException {
	  ViewProxy.getInstance().setICECandidate(options.getString("userID"), options.getString("data"));
    }


	// Methods
	@Kroll.method
	public String example()
	{
		Log.d(LCAT, "example called");
		return "hello world";
	}

	// Properties
	@Kroll.getProperty
	public String getExampleProp()
	{
		Log.d(LCAT, "get example property");
		return "hello world";
	}


	@Kroll.setProperty
	public void setExampleProp(String value) {
		Log.d(LCAT, "set example property: " + value);
	}

}

