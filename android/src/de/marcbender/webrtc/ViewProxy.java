/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.marcbender.webrtc;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutParams;
import org.appcelerator.titanium.view.TiUIView;
import org.appcelerator.titanium.util.TiRHelper;
import org.appcelerator.titanium.util.TiRHelper.ResourceNotFoundException;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiDimension;
import android.content.res.Resources;
import android.content.Intent;
import android.content.Context;
import android.os.Bundle;
import android.view.View;
import android.view.LayoutInflater;
import android.app.Activity;
import java.util.ArrayList;

import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import de.marcbender.webrtc.R;
import android.Manifest;
import android.app.Activity;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.Fragment;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.preference.PreferenceManager;
import androidx.appcompat.app.AppCompatActivity;
import android.view.ContextMenu;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.EditorInfo;
import android.webkit.URLUtil;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.os.Parcelable;
import java.util.ArrayList;
import java.util.Random;
import android.widget.FrameLayout;
import org.webrtc.SessionDescription;
import org.webrtc.IceCandidate;

import de.marcbender.webrtc.ui.SettingsActivity;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import de.marcbender.webrtc.DirectRTCClient;
import de.marcbender.webrtc.AppRTCClient;
import de.marcbender.webrtc.CallActivity;
import de.marcbender.webrtc.DeMarcbenderWebrtcModule;


// This proxy can be created by calling DeMarcbenderWebrtc.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule=DeMarcbenderWebrtcModule.class)
public class ViewProxy extends TiViewProxy
{
    private static AppRTCClient appRTCClient;
    private static CallActivity callActivityView;
    public String packageName;
    public Resources resources;
    private static ViewProxy instance;
	// Standard Debugging variables
	private static final String LCAT = "ViewProxy";
	private static final boolean DBG = TiConfig.LOGD;
    private static DeMarcbenderWebrtcModule webRTCModule;

    private static final String TAG = "ViewProxy";

    public View callView = null;

    public Activity context;
    private static Activity myactivity;
    TiViewProxy moduleProxy;



    private String room;

    private String myUserID;
    private String fromUserID;


  private static final int CONNECTION_REQUEST = 1;
  private static final int REMOVE_FAVORITE_INDEX = 0;
  private static boolean commandLineRun = false;

  private  ImageButton addFavoriteButton;
  private  EditText roomEditText;
  private  ListView roomListView;
  private  SharedPreferences sharedPref;
  private  String keyprefResolution;
  private  String keyprefFps;
  private  String keyprefVideoBitrateType;
  private  String keyprefVideoBitrateValue;
  private  String keyprefAudioBitrateType;
  private  String keyprefAudioBitrateValue;
  private  String keyprefRoomServerUrl;
  private  String keyprefRoom;
  private  String keyprefRoomList;
  private  ArrayList<String> roomList;
  private  ArrayAdapter<String> adapter;

  private boolean useValuesFromIntent = false;

  public WebRTCView contentView;
  public TiCompositeLayout webRTCViewContainerLayout;


  public static final String EXTRA_ROOMID = "ROOMID";
  public static final String EXTRA_URLPARAMETERS = "URLPARAMETERS";
  public static final String EXTRA_LOOPBACK = "LOOPBACK";
  public static final String EXTRA_VIDEO_CALL = "VIDEO_CALL";
  public static final String EXTRA_SCREENCAPTURE = "SCREENCAPTURE";
  public static final String EXTRA_CAMERA2 = "CAMERA2";
  public static final String EXTRA_VIDEO_WIDTH = "VIDEO_WIDTH";
  public static final String EXTRA_VIDEO_HEIGHT = "VIDEO_HEIGHT";
  public static final String EXTRA_VIDEO_FPS = "VIDEO_FPS";
  public static final String EXTRA_VIDEO_CAPTUREQUALITYSLIDER_ENABLED =
      "VIDEO_CAPTUREQUALITYSLIDER";
  public static final String EXTRA_VIDEO_BITRATE = "VIDEO_BITRATE";
  public static final String EXTRA_VIDEOCODEC = "VIDEOCODEC";
  public static final String EXTRA_HWCODEC_ENABLED = "HWCODEC";
  public static final String EXTRA_CAPTURETOTEXTURE_ENABLED = "CAPTURETOTEXTURE";
  public static final String EXTRA_FLEXFEC_ENABLED = "FLEXFEC";
  public static final String EXTRA_AUDIO_BITRATE = "AUDIO_BITRATE";
  public static final String EXTRA_AUDIOCODEC = "AUDIOCODEC";
  public static final String EXTRA_NOAUDIOPROCESSING_ENABLED =
      "NOAUDIOPROCESSING";
  public static final String EXTRA_AECDUMP_ENABLED = "AECDUMP";
  public static final String EXTRA_SAVE_INPUT_AUDIO_TO_FILE_ENABLED =
      "SAVE_INPUT_AUDIO_TO_FILE";
  public static final String EXTRA_OPENSLES_ENABLED = "OPENSLES";
  public static final String EXTRA_DISABLE_BUILT_IN_AEC = "DISABLE_BUILT_IN_AEC";
  public static final String EXTRA_DISABLE_BUILT_IN_AGC = "DISABLE_BUILT_IN_AGC";
  public static final String EXTRA_DISABLE_BUILT_IN_NS = "DISABLE_BUILT_IN_NS";
  public static final String EXTRA_DISABLE_WEBRTC_AGC_AND_HPF =
      "DISABLE_WEBRTC_GAIN_CONTROL";
  public static final String EXTRA_DISPLAY_HUD = "DISPLAY_HUD";
  public static final String EXTRA_TRACING = "TRACING";
  public static final String EXTRA_CMDLINE = "CMDLINE";
  public static final String EXTRA_RUNTIME = "RUNTIME";
  public static final String EXTRA_VIDEO_FILE_AS_CAMERA = "VIDEO_FILE_AS_CAMERA";
  public static final String EXTRA_SAVE_REMOTE_VIDEO_TO_FILE =
      "SAVE_REMOTE_VIDEO_TO_FILE";
  public static final String EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH =
      "SAVE_REMOTE_VIDEO_TO_FILE_WIDTH";
  public static final String EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT =
      "SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT";
  public static final String EXTRA_USE_VALUES_FROM_INTENT =
      "USE_VALUES_FROM_INTENT";
  public static final String EXTRA_DATA_CHANNEL_ENABLED = "DATA_CHANNEL_ENABLED";
  public static final String EXTRA_ORDERED = "ORDERED";
  public static final String EXTRA_MAX_RETRANSMITS_MS = "MAX_RETRANSMITS_MS";
  public static final String EXTRA_MAX_RETRANSMITS = "MAX_RETRANSMITS";
  public static final String EXTRA_PROTOCOL = "PROTOCOL";
  public static final String EXTRA_NEGOTIATED = "NEGOTIATED";
  public static final String EXTRA_ID = "ID";
  public static final String EXTRA_ENABLE_RTCEVENTLOG = "ENABLE_RTCEVENTLOG";
  public static final String EXTRA_USE_LEGACY_AUDIO_DEVICE =
      "USE_LEGACY_AUDIO_DEVICE";

  private FrameLayout viewWrapper;



    public static CallActivity getCallActivity() {
        return callActivityView;
    }



    public void appRTCClient(AppRTCClient client) {
        appRTCClient = client;
    }


    public void putCallActivity(CallActivity activity) {
        callActivityView = activity;
    }


    public static ViewProxy getInstance() {
        return instance;
    }

    public WebRTCView getContentView() {
        return contentView;
    }


    public static DeMarcbenderWebrtcModule getWebRTCModule() {
        return webRTCModule;
    }



  @SuppressWarnings("deprecation")
	public class WebRTCView extends TiUIView
	{
		public WebRTCView(TiViewProxy proxy) {
			super(proxy);

      moduleProxy = proxy;

      contentView = this;
      packageName = proxy.getActivity().getPackageName();
      resources = proxy.getActivity().getResources();

      context = proxy.getActivity();
      myactivity = proxy.getActivity();

      webRTCModule = DeMarcbenderWebrtcModule.getModule();

       int resId_viewHolder;
       resId_viewHolder = resources.getIdentifier("activity_call", "layout", packageName);
       LayoutInflater inflater = LayoutInflater.from(proxy.getActivity());
       int id_CallActivity;
        id_CallActivity = resources.getIdentifier("callActivity", "id", packageName);




       viewWrapper = (FrameLayout) inflater.inflate(resId_viewHolder, null);

			 callActivityView = (CallActivity) viewWrapper.findViewById(id_CallActivity);
      callActivityView.setVisibility(View.INVISIBLE);


  	PreferenceManager.setDefaultValues(context, de.marcbender.webrtc.R.xml.preferences, false);
    sharedPref = PreferenceManager.getDefaultSharedPreferences(context);
    keyprefResolution = TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_resolution_key);
    keyprefFps = TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_fps_key);
    keyprefVideoBitrateType = TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_maxvideobitrate_key);
    keyprefVideoBitrateValue = TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_maxvideobitratevalue_key);
    keyprefAudioBitrateType = TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_startaudiobitrate_key);
    keyprefAudioBitrateValue = TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_startaudiobitratevalue_key);
    keyprefRoomServerUrl = TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_room_server_url_key);
    keyprefRoom = TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_room_key);
    keyprefRoomList = TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_room_list_key);

    //context.setContentView(viewWrapper);

  	//setNativeView(viewWrapper);

	// 	try {
	// 		roomEditText = viewWrapper.findViewById(TiRHelper.getApplicationResource("id.room_edittext"));

	// 	} catch (ResourceNotFoundException e) {
	// 	}

  //   roomEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
  //     @Override
  //     public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
  //       if (i == EditorInfo.IME_ACTION_DONE) {
  //         addFavoriteButton.performClick();
  //         return true;
  //       }
  //       return false;
  //     }
  //   });
  //   roomEditText.requestFocus();


	// 	try {
  //   roomListView = viewWrapper.findViewById(TiRHelper.getApplicationResource("id.room_listview"));

	// 	} catch (ResourceNotFoundException e) {
	// 	}


  //   roomListView.setEmptyView(viewWrapper.findViewById(android.R.id.empty));
  //   roomListView.setOnItemClickListener(roomListClickListener);
  //  // registerForContextMenu(roomListView);

	// 	try {
  //   ImageButton connectButton = viewWrapper.findViewById(TiRHelper.getApplicationResource("id.connect_button"));
  //   connectButton.setOnClickListener(connectListener);

	// 	} catch (ResourceNotFoundException e) {
	// 	}


	

	// 		try {
  //   addFavoriteButton = viewWrapper.findViewById(TiRHelper.getApplicationResource("id.add_favorite_button"));

	// 	} catch (ResourceNotFoundException e) {
	// 	}

  //   addFavoriteButton.setOnClickListener(addFavoriteListener);

    // // If an implicit VIEW intent is launching the app, go directly to that URL.
    // final Intent intent = getIntent();
    // if ("android.intent.action.VIEW".equals(intent.getAction()) && !commandLineRun) {
    //   boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false);
    //   int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0);
    //   boolean useValuesFromIntent =
    //       intent.getBooleanExtra(EXTRA_USE_VALUES_FROM_INTENT, false);
    //   String room = sharedPref.getString(keyprefRoom, "");
    //   connectToRoom(room, true, loopback, useValuesFromIntent, runTimeMs);
    // }




      LayoutArrangement arrangement = null;


			if (proxy.hasProperty(TiC.PROPERTY_LAYOUT)) {
				String layoutProperty = TiConvert.toString(proxy.getProperty(TiC.PROPERTY_LAYOUT));
				if (layoutProperty.equals(TiC.LAYOUT_HORIZONTAL)) {
					arrangement = LayoutArrangement.HORIZONTAL;
				} else if (layoutProperty.equals(TiC.LAYOUT_VERTICAL)) {
					arrangement = LayoutArrangement.VERTICAL;
				}
			}
      webRTCViewContainerLayout = new TiCompositeLayout(proxy.getActivity(), arrangement);

			setNativeView(webRTCViewContainerLayout);

			webRTCViewContainerLayout.addView(viewWrapper);


			// setNativeView(viewWrapper);

		//	setNativeView(viewWrapper);

		}


    public void addNativeView(View callview) {
        callView = callview;

        Log.d(TAG, "\n\n\n #######################  callActivityView " + callView );
          setNativeView(callview);
    }

    public void putNativeView(View callview) {
          setNativeView(callview);
    }



		@Override
		public void processProperties(KrollDict d)
		{
			super.processProperties(d);
		}
	}

	// Constructor
	public ViewProxy()
	{
		super();
    instance = this;
	}

  public String getMyUserID() {
      return myUserID;
  }
  public String getFromUserID() {
    return fromUserID;
}

 /**
   * Get a value from the shared preference or from the intent, if it does not
   * exist the default is used.
   */
  private String sharedPrefGetString(
      String attributeId, String intentName, int defaultId, boolean useFromIntent) {
    String defaultValue = TiApplication.getInstance().getString(defaultId);
    if (useFromIntent) {
    //   String value = getIntent().getStringExtra(intentName);
    //   if (value != null) {
    //     return value;
    //   }
      return defaultValue;
    } else {
      String attributeName = TiApplication.getInstance().getString(resources.getIdentifier(attributeId, "string", packageName));
      return sharedPref.getString(attributeName, defaultValue);
    }
  }

  /**
   * Get a value from the shared preference or from the intent, if it does not
   * exist the default is used.
   */
  private boolean sharedPrefGetBoolean(
      String attributeId, String intentName, int defaultId, boolean useFromIntent) {
    boolean defaultValue = Boolean.parseBoolean(TiApplication.getInstance().getString(defaultId));
    if (useFromIntent) {
      return defaultValue;
    } else {
      String attributeName = TiApplication.getInstance().getString(resources.getIdentifier(attributeId, "string", packageName));
      return sharedPref.getBoolean(attributeName, defaultValue);
    }
  }

  /**
   * Get a value from the shared preference or from the intent, if it does not
   * exist the default is used.
   */
  private int sharedPrefGetInteger(
      String attributeId, String intentName, int defaultId, boolean useFromIntent) {
    String defaultString = TiApplication.getInstance().getString(defaultId);
    int defaultValue = Integer.parseInt(defaultString);
    if (useFromIntent) {
      return defaultValue;
    } else {
      String attributeName = TiApplication.getInstance().getString(resources.getIdentifier(attributeId, "string", packageName));
      String value = sharedPref.getString(attributeName, defaultString);
      try {
        return Integer.parseInt(value);
      } catch (NumberFormatException e) {
        Log.e(TAG, "Wrong setting for: " + attributeName + ":" + value);
        return defaultValue;
      }
    }
  }

  @SuppressWarnings("StringSplitter")
  private void connectToRoom(String roomId, boolean commandLineRun, boolean loopback,
      boolean useValuesFromIntent, int runTimeMs, boolean callInitiator) {
    // commandLineRun = commandLineRun;


    Log.w(TAG, "-------------------   toUserId: " + roomId);


    // roomId is random for loopback.
    if (loopback) {
      roomId = Integer.toString((new Random()).nextInt(100000000));
    }

    String roomUrl = sharedPref.getString(
        keyprefRoomServerUrl, TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_room_server_url_default));

    // Video call enabled flag.
    boolean videoCallEnabled = true;
    // boolean videoCallEnabled = sharedPrefGetBoolean(de.marcbender.webrtc.R.string.pref_videocall_key,
    //     EXTRA_VIDEO_CALL, de.marcbender.webrtc.R.string.pref_videocall_default, useValuesFromIntent);

    // Use screencapture option.
    boolean useScreencapture = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_screencapture_default),false);
    // Use Camera2 option.
    boolean useCamera2 = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_camera2_default),true);
    
    // Get default codecs.
    String videoCodec = TiConvert.toString(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_videocodec_default));

    String audioCodec = TiConvert.toString(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_audiocodec_default));

    // Check HW codec flag.
    boolean hwCodec = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_hwcodec_default),true);

    // Check Capture to texture.
    boolean captureToTexture = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_capturetotexture_default),true);

    // Check FlexFEC.
    boolean flexfecEnabled = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_flexfec_default),false);
    

    // Check Disable Audio Processing flag.
    boolean noAudioProcessing = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_noaudioprocessing_default),false);

    boolean aecDump = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_aecdump_default),false); 

    boolean saveInputAudioToFile = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_enable_save_input_audio_to_file_default),false);

    // Check OpenSL ES enabled flag.
    boolean useOpenSLES = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_opensles_default),true); 

    // Check Disable built-in AEC flag.
    boolean disableBuiltInAEC = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_disable_built_in_aec_default),false);

    // Check Disable built-in AGC flag.
    boolean disableBuiltInAGC = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_disable_built_in_agc_default),false);
    

    // Check Disable built-in NS flag.
    boolean disableBuiltInNS = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_disable_built_in_ns_default),false);


    // Check Disable gain control
    boolean disableWebRtcAGCAndHPF = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_disable_webrtc_agc_default),false);
    
    // Get video resolution from settings.
    int videoWidth = 0;
    int videoHeight = 0;
    if (useValuesFromIntent) {
     // videoWidth = getIntent().getIntExtra(EXTRA_VIDEO_WIDTH, 0);
     // videoHeight = getIntent().getIntExtra(EXTRA_VIDEO_HEIGHT, 0);
    }
    if (videoWidth == 0 && videoHeight == 0) {
      String resolution = TiConvert.toString(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_resolution_default));

      String[] dimensions = resolution.split("[ x]+");
      if (dimensions.length == 2) {
        try {
          videoWidth = Integer.parseInt(dimensions[0]);
          videoHeight = Integer.parseInt(dimensions[1]);
        } catch (NumberFormatException e) {
          videoWidth = 0;
          videoHeight = 0;
          Log.e(TAG, "Wrong video resolution setting: " + resolution);
        }
      }
    }

    // Get camera fps from settings.
    int cameraFps = 25;
    if (useValuesFromIntent) {
     // cameraFps = getIntent().getIntExtra(EXTRA_VIDEO_FPS, 0);
    }
    if (cameraFps == 0) {
      String fps = TiConvert.toString(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_fps_default));

      String[] fpsValues = fps.split("[ x]+");
      if (fpsValues.length == 2) {
        try {
          cameraFps = Integer.parseInt(fpsValues[0]);
        } catch (NumberFormatException e) {
          cameraFps = 0;
          Log.e(TAG, "Wrong camera fps setting: " + fps);
        }
      }
    }

    // Check capture quality slider flag.
    boolean captureQualitySlider = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_capturequalityslider_default),true);
    

    // Get video and audio start bitrate.
    int videoStartBitrate =  TiConvert.toInt(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_maxvideobitrate_default),0);


    int audioStartBitrate =  TiConvert.toInt(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_startaudiobitrate_default),0);




    // Check statistics display option.
    boolean displayHud = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_displayhud_default),false);

    boolean tracing = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_tracing_default),false);

    // Check Enable RtcEventLog.
    boolean rtcEventLogEnabled = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_enable_rtceventlog_default),false);

    boolean useLegacyAudioDevice = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_use_legacy_audio_device_default),false);

    // Get datachannel options
    boolean dataChannelEnabled = true;
    // boolean dataChannelEnabled = sharedPrefGetBoolean(de.marcbender.webrtc.R.string.pref_enable_datachannel_key,
    //     EXTRA_DATA_CHANNEL_ENABLED, de.marcbender.webrtc.R.string.pref_enable_datachannel_default,
    //     useValuesFromIntent);

    boolean ordered = TiConvert.toBoolean(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_ordered_default),false);
    boolean negotiated = false;

    // boolean negotiated = sharedPrefGetBoolean(de.marcbender.webrtc.R.string.pref_negotiated_key,
    //     EXTRA_NEGOTIATED, de.marcbender.webrtc.R.string.pref_negotiated_default, useValuesFromIntent);


    int maxRetrMs = TiConvert.toInt(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_max_retransmit_time_ms_default),0); 

    int maxRetr = TiConvert.toInt(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_max_retransmits_default),0); 

    int id = TiConvert.toInt(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_data_id_default),0);

    String protocol = TiConvert.toString(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.pref_data_protocol_default));
    
    // Start AppRTCMobile activity.
    Log.d(TAG, "Connecting to room " + roomId + " at URL " + roomUrl);
//    if (validateUrl(roomUrl)) {
      Uri uri = Uri.parse(roomUrl);

//      Intent intent = new Intent(context, CallActivity.class);




      KrollDict intent = new KrollDict();

      intent.put("URI",uri);

      intent.put("CALL_INITIATOR", callInitiator);

      intent.put(EXTRA_ROOMID, roomId);
      intent.put(EXTRA_LOOPBACK, loopback);
      intent.put(EXTRA_VIDEO_CALL, videoCallEnabled);
      intent.put(EXTRA_SCREENCAPTURE, useScreencapture);
      intent.put(EXTRA_CAMERA2, useCamera2);
      intent.put(EXTRA_VIDEO_WIDTH, videoWidth);
      intent.put(EXTRA_VIDEO_HEIGHT, videoHeight);
      intent.put(EXTRA_VIDEO_FPS, cameraFps);
      intent.put(EXTRA_VIDEO_CAPTUREQUALITYSLIDER_ENABLED, captureQualitySlider);
      intent.put(EXTRA_VIDEO_BITRATE, videoStartBitrate);
      intent.put(EXTRA_VIDEOCODEC, videoCodec);
      intent.put(EXTRA_HWCODEC_ENABLED, hwCodec);
      intent.put(EXTRA_CAPTURETOTEXTURE_ENABLED, captureToTexture);
      intent.put(EXTRA_FLEXFEC_ENABLED, flexfecEnabled);
      intent.put(EXTRA_NOAUDIOPROCESSING_ENABLED, noAudioProcessing);
      intent.put(EXTRA_AECDUMP_ENABLED, aecDump);
      intent.put(EXTRA_SAVE_INPUT_AUDIO_TO_FILE_ENABLED, saveInputAudioToFile);
      intent.put(EXTRA_OPENSLES_ENABLED, useOpenSLES);
      intent.put(EXTRA_DISABLE_BUILT_IN_AEC, disableBuiltInAEC);
      intent.put(EXTRA_DISABLE_BUILT_IN_AGC, disableBuiltInAGC);
      intent.put(EXTRA_DISABLE_BUILT_IN_NS, disableBuiltInNS);
      intent.put(EXTRA_DISABLE_WEBRTC_AGC_AND_HPF, disableWebRtcAGCAndHPF);
      intent.put(EXTRA_AUDIO_BITRATE, audioStartBitrate);
      intent.put(EXTRA_AUDIOCODEC, audioCodec);
      intent.put(EXTRA_DISPLAY_HUD, displayHud);
      intent.put(EXTRA_TRACING, tracing);
      intent.put(EXTRA_ENABLE_RTCEVENTLOG, rtcEventLogEnabled);
      intent.put(EXTRA_CMDLINE, commandLineRun);
      intent.put(EXTRA_RUNTIME, runTimeMs);
      intent.put(EXTRA_USE_LEGACY_AUDIO_DEVICE, useLegacyAudioDevice);

      intent.put(EXTRA_DATA_CHANNEL_ENABLED, dataChannelEnabled);

      if (dataChannelEnabled) {
        intent.put(EXTRA_ORDERED, ordered);
        intent.put(EXTRA_MAX_RETRANSMITS_MS, maxRetrMs);
        intent.put(EXTRA_MAX_RETRANSMITS, maxRetr);
        intent.put(EXTRA_PROTOCOL, protocol);
        intent.put(EXTRA_NEGOTIATED, negotiated);
        intent.put(EXTRA_ID, id);
      }

      if (useValuesFromIntent) {
        // if (getIntent().hasExtra(EXTRA_VIDEO_FILE_AS_CAMERA)) {
        // //   String videoFileAsCamera =
        // //       getIntent().getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA);
        // //   intent.putExtra(EXTRA_VIDEO_FILE_AS_CAMERA, videoFileAsCamera);
        // }

        // if (getIntent().hasExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE)) {
        //   String saveRemoteVideoToFile =
        //       getIntent().getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE);
        //   intent.putExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, saveRemoteVideoToFile);
        // }

    //     if (getIntent().hasExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH)) {
    //       int videoOutWidth =
    //           getIntent().getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH, 0);
    //       intent.putExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH, videoOutWidth);
    //     }

    //     if (getIntent().hasExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT)) {
    //       int videoOutHeight =
    //           getIntent().getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT, 0);
    //       intent.putExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT, videoOutHeight);
    //     }
       }

      startCallActivity(intent);
    //}
  }

  private static final String[] PERMISSIONS_START_CALL = {Manifest.permission.CAMERA, Manifest.permission.RECORD_AUDIO};//WRITE_EXTERNAL_STORAGE, CAPTURE_VIDEO_OUTPUT
  private static final int PERMISSIONS_REQUEST_START_CALL = 101;
  private KrollDict startCallIntent;

  private void startCallActivity(KrollDict intent) {
  //  ((CallActivity) callActivityView putProperties(intent));

		 //CallActivity myCallActivityView = ((CallActivity) viewWrapper);

    callActivityView.setProperties(intent);


    Activity currentActivity = TiApplication.getInstance().getCurrentActivity();


    if(!hasPermissions(context, PERMISSIONS_START_CALL)){
      startCallIntent = intent;

      currentActivity.requestPermissions(PERMISSIONS_START_CALL, PERMISSIONS_REQUEST_START_CALL);
      return;
    }

    callActivityView.setupCallView();
   // contentView.putNativeView(callView);

    //currentActivity.startActivityForResult(intent, CONNECTION_REQUEST);
    // Log.d(TAG, "\n\n\n ####################### callActivityView " + callActivityView );



            //   LayoutParams layoutParams = contentView.getLayoutParams();
            //   TiDimension nativeWidth = new TiDimension(TiConvert.toString(moduleProxy.getWidth()), TiDimension.TYPE_WIDTH);
            //   TiDimension nativeHeight = new TiDimension(TiConvert.toString(moduleProxy.getHeight()), TiDimension.TYPE_HEIGHT);
            //   layoutParams.height = (int)(nativeHeight.getValue());
            //   layoutParams.width = (int)(nativeWidth.getValue());

            //   // cellContent = uiView.getOuterView();

            // if (callActivityView != null){
            //   webRTCViewContainerLayout.addView(callActivityView, layoutParams);      
            //   callActivityView.setupCallView();    
            // }
            // else {
            //       Log.d(TAG, "\n\n NO callActivityView " + callActivityView);
            // }





  }

  private static boolean hasPermissions(Context context, String... permissions) {
    if (context != null && permissions != null) {
      for (String permission : permissions) {
        if (context.checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {
          return false;
        }
      }
    }
    return true;
  }


  public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
    // super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    Activity currentActivity = TiApplication.getInstance().getCurrentActivity();
          Log.d(TAG, "\n\n onRequestPermissionsResult ");

    switch (requestCode) {
      case PERMISSIONS_REQUEST_START_CALL: {
        if (hasPermissions(context, PERMISSIONS_START_CALL)) {
          // permission was granted, yay!
          if (startCallIntent != null) {


    callActivityView.setupCallView();


            //   LayoutParams layoutParams = contentView.getLayoutParams();
            //   TiDimension nativeWidth = new TiDimension(TiConvert.toString(moduleProxy.getWidth()), TiDimension.TYPE_WIDTH);
            //   TiDimension nativeHeight = new TiDimension(TiConvert.toString(moduleProxy.getHeight()), TiDimension.TYPE_HEIGHT);
            //   layoutParams.height = (int)(nativeHeight.getValue());
            //   layoutParams.width = (int)(nativeWidth.getValue());

            //   // cellContent = uiView.getOuterView();

            // if (callActivityView != null){
            //   webRTCViewContainerLayout.addView(callActivityView, layoutParams);      
            //   callActivityView.setupCallView();    
            // }
            // else {
            //       Log.d(TAG, "\n\n NO callActivityView " + callActivityView);
            // }



  	//		  currentActivity.startActivityForResult(startCallIntent, CONNECTION_REQUEST);
		  }
        } else {
          Toast.makeText(context, "Required permissions denied.", Toast.LENGTH_LONG).show();
        }
        return;
      }
    }
  }

//   @Override
//   protected void onRestoreInstanceState(Bundle savedInstanceState) {
//     super.onRestoreInstanceState(savedInstanceState);
//     startCallIntent = savedInstanceState.getParcelable("startCallIntent");
//   }

//   @Override
//   protected void onSaveInstanceState(Bundle outState) {
//     super.onSaveInstanceState(outState);
//     outState.putParcelable("startCallIntent", startCallIntent);
//   }

  private boolean validateUrl(String url) {
    if (URLUtil.isHttpsUrl(url) || URLUtil.isHttpUrl(url)) {
      return true;
    }

    // new AlertDialog.Builder(context)
    //     .setTitle(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.invalid_url_title))
    //     .setMessage(TiApplication.getInstance().getString(de.marcbender.webrtc.R.string.invalid_url_text, url))
    //     .setCancelable(false)
    //     .setNeutralButton(de.marcbender.webrtc.R.string.ok,
    //         new DialogInterface.OnClickListener() {
    //           @Override
    //           public void onClick(DialogInterface dialog, int id) {
    //             dialog.cancel();
    //           }
    //         })
    //     .create()
    //     .show();
    return false;
  }

  private final AdapterView.OnItemClickListener roomListClickListener =
      new AdapterView.OnItemClickListener() {
        @Override
        public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
          String roomId = ((TextView) view).getText().toString();
          // connectToRoom(roomId, false, false, false, 0);
        }
      };

  private final OnClickListener addFavoriteListener = new OnClickListener() {
    @Override
    public void onClick(View view) {
      String newRoom = roomEditText.getText().toString();
      if (newRoom.length() > 0 && !roomList.contains(newRoom)) {
        adapter.add(newRoom);
        adapter.notifyDataSetChanged();
      }
    }
  };

  private final OnClickListener connectListener = new OnClickListener() {
    @Override
    public void onClick(View view) {
      // connectToRoom(roomEditText.getText().toString(), false, false, false, 0);
    }
  };

	@Override
	public TiUIView createView(Activity activity)
	{
		TiUIView view = new WebRTCView(this);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;
		return view;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);

		if (options.containsKey("message")) {
			Log.d(LCAT, "example created with message: " + options.get("message"));
		}
	}

	// Methods
	@Kroll.method
	public void printMessage(String message)
	{
		Log.d(LCAT, "printing message: " + message);
	}





	public void startWebRTC(String userId, String fromId, boolean callInitiator)
	{
      myUserID = userId;
      fromUserID = fromId;
      callActivityView.setVisibility(View.VISIBLE);

      connectToRoom(userId, false, false, false, 0, callInitiator);

  }


  public void createOffer(String userId)
  {
    if (callActivityView.getPeerConnectionClient() != null){
        callActivityView.logAndToast("Creating OFFER...");

        Log.e(TAG, "Creating Offer: "+ userId);


        callActivityView.getPeerConnectionClient().createOffer();
    }
  }


  public void setRemoteOffer(String userId, String description)
    throws JSONException {
          Log.e(TAG, "setRemoteOffer: "+ userId);

          JSONObject descriptionJSON = new JSONObject(description);
          String sdpString = null;
          sdpString = descriptionJSON.get("sdp").toString();
          SessionDescription sdp = new SessionDescription(SessionDescription.Type.OFFER, sdpString);

          callActivityView.getPeerConnectionClient().setRemoteDescription(sdp);
              // Create answer. Answer SDP will be sent to offering client in
              // PeerConnectionEvents.onLocalDescription event.
          callActivityView.getPeerConnectionClient().createAnswer();
  }

  public void setRemoteAnswer(String userId, String description)
    throws JSONException {

          JSONObject descriptionJSON = new JSONObject(description);
          String sdpString = null;
          sdpString = descriptionJSON.get("sdp").toString();
          SessionDescription sdp = new SessionDescription(SessionDescription.Type.ANSWER, sdpString);
          Log.e(TAG, "setRemoteAnswer: "+ userId);

          callActivityView.getPeerConnectionClient().setRemoteDescription(sdp);
  }

  public void setICECandidate(String userId, String description)
    throws JSONException {
      Log.e(TAG, "setICECandidate: "+ userId);

          JSONObject descriptionJSON = new JSONObject(description);
          String sdpString = null;
          sdpString = descriptionJSON.get("sdp").toString();

          IceCandidate candidate = new IceCandidate(descriptionJSON.get("id").toString(),descriptionJSON.getInt("label"), descriptionJSON.get("candidate").toString());

          callActivityView.getPeerConnectionClient().addRemoteIceCandidate(candidate);
  }


	@Kroll.getProperty @Kroll.method
	public String getMessage()
	{
        return "Hello World from my module";
	}

	@Kroll.setProperty @Kroll.method
	public void setMessage(String message)
	{
	    Log.d(LCAT, "Tried setting module message to: " + message);
	}

}